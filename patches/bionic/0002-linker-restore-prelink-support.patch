From e5201a89b5fc9b722b6986962c5b3dcb07ffd486 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Fri, 23 Nov 2012 12:27:25 +0700
Subject: [PATCH 2/2] linker: restore prelink support

Prelink support is required to load old vendor binary blobs
on many devices properly

This commit partially reverts 4688279db5dcc4004941e7f133c4a1c3617d842c

 This is the 2nd commit message:

bionic: linker: fix prelink support

load_bias_ needs to be calculated from the min_vaddr, not the
prelink address

Fixes

couldn't map "libraryname.so" segment 1: Invalid argument

Change-Id: Ibf1fd1d5a0f2c81ce515f5d47412a043ba768247
---
 linker/Android.mk      |  4 ++++
 linker/linker_phdr.cpp | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 linker/linker_phdr.h   |  8 ++++++++
 3 files changed, 62 insertions(+)

diff --git a/linker/Android.mk b/linker/Android.mk
index a846695..d617b69 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -43,6 +43,10 @@ ifeq ($(TARGET_NEEDS_NON_PIE_SUPPORT),true)
   LOCAL_CFLAGS += -DENABLE_NON_PIE_SUPPORT
 endif
 
+ifeq ($(TARGET_NEEDS_PRELINK_SUPPORT),true)
+  LOCAL_CFLAGS += -DENABLE_PRELINK_SUPPORT
+endif
+
 # we don't want crtbegin.o (because we have begin.o), so unset it
 # just for this module
 LOCAL_NO_CRT := true
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 4b1c0ca..0873338 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -122,7 +122,11 @@
 ElfReader::ElfReader(const char* name, int fd, off64_t file_offset)
     : name_(name), fd_(fd), file_offset_(file_offset),
       phdr_num_(0), phdr_mmap_(nullptr), phdr_table_(nullptr), phdr_size_(0),
+#ifdef ENABLE_PRELINK_SUPPORT
+      load_start_(nullptr), load_size_(0), load_bias_(0), required_base_(0),
+#else
       load_start_(nullptr), load_size_(0), load_bias_(0),
+#endif
       loaded_phdr_(nullptr) {
 }
 
@@ -286,6 +290,38 @@ size_t phdr_table_get_load_size(const ElfW(Phdr)* phdr_table, size_t phdr_count,
   return max_vaddr - min_vaddr;
 }
 
+#ifdef ENABLE_PRELINK_SUPPORT
+typedef struct {
+    long mmap_addr;
+    char tag[4]; /* 'P', 'R', 'E', ' ' */
+} prelink_info_t;
+
+/* Returns the requested base address if the library is prelinked,
+ * and 0 otherwise.  */
+static Elf32_Addr is_prelinked(int fd, const char *name)
+{
+    off_t sz = lseek(fd, -sizeof(prelink_info_t), SEEK_END);
+    if (sz < 0) {
+        DL_ERR("lseek() failed!");
+        return 0;
+    }
+
+    prelink_info_t info;
+    int rc = TEMP_FAILURE_RETRY(read(fd, &info, sizeof(info)));
+    if (rc != sizeof(info)) {
+        DL_ERR("Could not read prelink_info_t structure for `%s`\n", name);
+        return 0;
+    }
+
+    if (memcmp(info.tag, "PRE ", 4)) {
+        DL_ERR("`%s` is not a prelinked library\n", name);
+        return 0;
+    }
+
+    return (unsigned long)info.mmap_addr;
+}
+#endif
+
 // Reserve a virtual address range big enough to hold all loadable
 // segments of a program header table. This is done by creating a
 // private anonymous mmap() with PROT_NONE.
@@ -297,6 +333,10 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
     return false;
   }
 
+#ifdef ENABLE_PRELINK_SUPPORT
+  required_base_ = is_prelinked(fd_, name_);
+#endif
+
   uint8_t* addr = reinterpret_cast<uint8_t*>(min_vaddr);
   void* start;
   size_t reserved_size = 0;
@@ -318,6 +358,12 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
       return false;
     }
     int mmap_flags = MAP_PRIVATE | MAP_ANONYMOUS;
+#ifdef ENABLE_PRELINK_SUPPORT
+    if (required_base_ != 0) {
+      mmap_flags |= MAP_FIXED;
+      addr = (uint8_t*) required_base_;
+    }
+#endif
     start = mmap(addr, load_size_, PROT_NONE, mmap_flags, -1, 0);
     if (start == MAP_FAILED) {
       DL_ERR("couldn't reserve %zd bytes of address space for \"%s\"", load_size_, name_);
@@ -328,7 +374,11 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
   }
 
   load_start_ = start;
+#ifdef ENABLE_PRELINK_SUPPORT
+  load_bias_ = reinterpret_cast<uint8_t*>(start) - reinterpret_cast<uint8_t*>(min_vaddr);
+#else
   load_bias_ = reinterpret_cast<uint8_t*>(start) - addr;
+#endif
   return true;
 }
 
diff --git a/linker/linker_phdr.h b/linker/linker_phdr.h
index 65d302c..ee50e8f 100644
--- a/linker/linker_phdr.h
+++ b/linker/linker_phdr.h
@@ -48,6 +48,9 @@ class ElfReader {
   ElfW(Addr) load_start() { return reinterpret_cast<ElfW(Addr)>(load_start_); }
   size_t load_size() { return load_size_; }
   ElfW(Addr) load_bias() { return load_bias_; }
+#ifdef ENABLE_PRELINK_SUPPORT
+  Elf32_Addr required_base() { return required_base_; }
+#endif
   const ElfW(Phdr)* loaded_phdr() { return loaded_phdr_; }
 
  private:
@@ -76,6 +79,11 @@ class ElfReader {
   size_t load_size_;
   // Load bias.
   ElfW(Addr) load_bias_;
+#ifdef ENABLE_PRELINK_SUPPORT
+  // For prelinked libraries, mandatory load address of the first
+  // loadable segment. 0 otherwise.
+  Elf32_Addr required_base_;
+#endif
 
   // Loaded phdr.
   const ElfW(Phdr)* loaded_phdr_;
-- 
2.1.4

