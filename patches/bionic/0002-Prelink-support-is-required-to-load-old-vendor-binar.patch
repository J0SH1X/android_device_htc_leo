From 240513f4db16d5359f747164c7ab9b25270e4773 Mon Sep 17 00:00:00 2001
From: maniacx <macs18max@gmail.com>
Date: Sat, 3 Sep 2016 08:13:39 +0800
Subject: [PATCH 2/2] Prelink support is required to load old vendor binary
 blobs on many devices properly This commit partially reverts
 4688279db5dcc4004941e7f133c4a1c3617d842c This is the 2nd commit message:

bionic: linker: fix prelink support

load_bias_ needs to be calculated from the min_vaddr, not the prelink address

Fixes

couldn't map "libraryname.so" segment 1: Invalid argument

Change-Id: Id4f52d7c0b34c02cfa5b1abbe92db1950cc5f9cd
---
 linker/Android.mk      |  4 ++++
 linker/linker_phdr.cpp | 46 +++++++++++++++++++++++++++++++++++++++++++++-
 linker/linker_phdr.h   |  8 ++++++++
 3 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/linker/Android.mk b/linker/Android.mk
index 0bf8682..a9e5eac 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -49,6 +49,10 @@ ifeq ($(TARGET_IS_64_BIT),true)
 LOCAL_CPPFLAGS += -DTARGET_IS_64_BIT
 endif
 
+ifeq ($(TARGET_NEEDS_PRELINK_SUPPORT),true)
+  LOCAL_CFLAGS += -DENABLE_PRELINK_SUPPORT
+endif
+
 # We need to access Bionic private headers in the linker.
 LOCAL_CFLAGS += -I$(LOCAL_PATH)/../libc/
 
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 30118e3..182f52f 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -136,7 +136,11 @@ static int GetTargetElfMachine() {
 ElfReader::ElfReader(const char* name, int fd, off64_t file_offset, off64_t file_size)
     : name_(name), fd_(fd), file_offset_(file_offset), file_size_(file_size),
       phdr_num_(0), phdr_mmap_(nullptr), phdr_table_(nullptr), phdr_size_(0),
+#ifdef ENABLE_PRELINK_SUPPORT
+      load_start_(nullptr), load_size_(0), load_bias_(0), required_base_(0),
+#else
       load_start_(nullptr), load_size_(0), load_bias_(0),
+#endif
       loaded_phdr_(nullptr) {
 }
 
@@ -301,6 +305,38 @@ size_t phdr_table_get_load_size(const ElfW(Phdr)* phdr_table, size_t phdr_count,
   return max_vaddr - min_vaddr;
 }
 
+#ifdef ENABLE_PRELINK_SUPPORT
+typedef struct {
+    unsigned long mmap_addr;
+    char tag[4]; /* 'P', 'R', 'E', ' ' */
+} prelink_info_t;
+
+/* Returns the requested base address if the library is prelinked,
+ * and 0 otherwise.  */
+static ElfW(Addr) is_prelinked(int fd, const char *name)
+{
+    off_t sz = lseek(fd, -sizeof(prelink_info_t), SEEK_END);
+    if (sz < 0) {
+        DL_ERR("lseek() failed!");
+        return 0;
+    }
+
+    prelink_info_t info;
+    int rc = TEMP_FAILURE_RETRY(read(fd, &info, sizeof(info)));
+    if (rc != sizeof(info)) {
+        DL_ERR("Could not read prelink_info_t structure for `%s`\n", name);
+        return 0;
+    }
+
+    if (memcmp(info.tag, "PRE ", 4)) {
+        DL_ERR("`%s` is not a prelinked library\n", name);
+        return 0;
+    }
+
+    return reinterpret_cast<unsigned long>(info.mmap_addr);
+}
+#endif
+
 // Reserve a virtual address range big enough to hold all loadable
 // segments of a program header table. This is done by creating a
 // private anonymous mmap() with PROT_NONE.
@@ -311,7 +347,9 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
     DL_ERR("\"%s\" has no loadable segments", name_);
     return false;
   }
-
+#ifdef ENABLE_PRELINK_SUPPORT
+  required_base_ = is_prelinked(fd_, name_);
+#endif
   uint8_t* addr = reinterpret_cast<uint8_t*>(min_vaddr);
   void* start;
   size_t reserved_size = 0;
@@ -339,6 +377,12 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
       return false;
     }
     int mmap_flags = MAP_PRIVATE | MAP_ANONYMOUS;
+#ifdef ENABLE_PRELINK_SUPPORT
+    if (required_base_ != 0) {
+      mmap_flags |= MAP_FIXED;
+      mmap_hint= reinterpret_cast<uint8_t*>(required_base_);
+    }
+#endif
     start = mmap(mmap_hint, load_size_, PROT_NONE, mmap_flags, -1, 0);
     if (start == MAP_FAILED) {
       DL_ERR("couldn't reserve %zd bytes of address space for \"%s\"", load_size_, name_);
diff --git a/linker/linker_phdr.h b/linker/linker_phdr.h
index 3affa66..60ce368 100644
--- a/linker/linker_phdr.h
+++ b/linker/linker_phdr.h
@@ -48,6 +48,9 @@ class ElfReader {
   ElfW(Addr) load_start() { return reinterpret_cast<ElfW(Addr)>(load_start_); }
   size_t load_size() { return load_size_; }
   ElfW(Addr) load_bias() { return load_bias_; }
+#ifdef ENABLE_PRELINK_SUPPORT
+  Elf32_Addr required_base() { return required_base_; }
+#endif
   const ElfW(Phdr)* loaded_phdr() { return loaded_phdr_; }
 
  private:
@@ -77,6 +80,11 @@ class ElfReader {
   size_t load_size_;
   // Load bias.
   ElfW(Addr) load_bias_;
+#ifdef ENABLE_PRELINK_SUPPORT
+  // For prelinked libraries, mandatory load address of the first
+  // loadable segment. 0 otherwise.
+  Elf32_Addr required_base_;
+#endif
 
   // Loaded phdr.
   const ElfW(Phdr)* loaded_phdr_;
-- 
1.9.1

